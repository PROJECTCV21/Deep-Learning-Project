# -*- coding: utf-8 -*-
"""Lungs_segmentation_(2) (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mJSEamIASH5Yt4HRaAMRy2oVkjR9DkqN
"""

import numpy as np
import os
from PIL import Image 
import numpy as np 
import imageio as io
import matplotlib.pyplot as plt

import torch

import cv2

import albumentations as A

!pip install lungs-segmentation

from lungs_segmentation.pre_trained_models import create_model

model = create_model("resnet34")

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = model.to(device)

import lungs_segmentation.inference as inference

!pip install matplotlib==3.1.3

import matplotlib.pyplot as plt
import matplotlib

from google.colab import drive
drive.mount('/content/drive')

#plt.figure(figsize=(20,40))
root_dir='/content/drive/MyDrive/archive (1)/test/test/true'
images=os.listdir(root_dir)
for i, image_name in enumerate(images):
  if image_name.endswith(".png"):
    l=len(image_name)
    im=image_name[:l-4]
    img = cv2.imread(root_dir+"/"+image_name,1)
    print (image_name)
    #plt.subplot(1,1,1)
    #path='/content/drive/MyDrive/Colab Notebooks/project/cordiomegaly for segmentaion/'+ image_name
    image, mask = inference.inference(model,'/content/drive/MyDrive/archive (1)/test/test/true/'+image_name, 0.2)
    #plt.imshow(inference.img_with_masks( image, [mask[0], mask[1]], alpha = 0.1))
    result_m1 = 255*(mask[0]+mask[1])
    cv2.imwrite('/content/drive/MyDrive/Colab Notebooks/data/test/true/' + image_name ,result_m1)

# add masks
result_m1 = 255*(mask[0]+mask[1])
result_m1 = result_m1.clip(0, 255).astype("uint8")

# show results
x, y, w, h = cv2.boundingRect(mask[0]+mask[1])
lung_box = cv2.rectangle(result_m1,(x,y),(x+w,y+h),(255,0,0),1)
r2 = result_m1[x:x+w,y:y+h]
plt.figure(figsize=(12,6))
plt.imshow(lung_box,cmap="gray")
w

count_r=0
count_l=0
im=r2
r,c=r2.shape
x=round(3*(r2.shape[0]/4 ))
y=round(r2.shape[1]/2)
flag=0
for i in range(y,c):
  if r2[x,i]==255:
      flag=1
      k=i
      break
  else:
    count_r=count_r+1
    #r2[x,i]=255
    

for j in range(y-1,1,-1):
  if r2[x,j]==255:
      flag=1
      t=j
      break
  else:
    #r2[x,i]=255
    count_l= count_l +1
plt.imshow(r2,cmap='gray')
for s in range(t,k):
  im[x,s]=255
plt.imshow(im,cmap='gray')
total_count  = count_r + count_l

total_count

CTR=0
CTR=186/w*100
CTR

